base_images:
  ocp_4.18_base:
    name: "4.18"
    namespace: ocp
    tag: base
  ocp_builder_rhel-9-golang-1.23-openshift-4.18:
    name: builder
    namespace: ocp
    tag: rhel-9-golang-1.23-openshift-4.18
  redhat-base-ubi9:
    name: ubi-micro
    namespace: ocp
    tag: "9"
build_root:
  image_stream_tag:
    name: release
    namespace: openshift
    tag: golang-1.23
images:
- dockerfile_literal: |
    FROM src
    RUN dnf install -y skopeo git jq && dnf clean all
  from: src
  to: instaslice-base-src
- dockerfile_path: Dockerfile.ocp
  from: redhat-base-ubi9
  inputs:
    ocp_builder_rhel-9-golang-1.23-openshift-4.18:
      as:
      - brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_9_1.23
  to: instaslice-controller
- dockerfile_path: Dockerfile.daemonset-ocp
  from: redhat-base-ubi9
  inputs:
    ocp_builder_rhel-9-golang-1.23-openshift-4.18:
      as:
      - brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_9_1.23
  to: instaslice-daemonset
- context_dir: .
  dockerfile_path: Dockerfile.ocp
  from: redhat-base-ubi9
  inputs:
    ocp_builder_rhel-9-golang-1.23-openshift-4.18: {}
  to: instaslice-operator
operator:
  bundles:
  - as: instaslice-operator-bundle
    dockerfile_path: bundle.Dockerfile
promotion:
  to:
  - name: "4.18"
    namespace: ocp
releases:
  initial:
    release:
      channel: stable
      version: "4.18"
  latest:
    release:
      channel: stable
      version: "4.18"
resources:
  '*':
    limits:
      memory: 4Gi
    requests:
      cpu: 100m
      memory: 200Mi
tests:
- as: lint
  commands: |
    #!/bin/bash

    export GOCACHE=/tmp/
    export GOLANGCI_LINT_CACHE=/tmp/.cache
    export GOPROXY=https://proxy.golang.org
    make lint
  container:
    clone: true
    from: src
- as: unit
  commands: |
    #!/bin/bash

    make test
  container:
    from: instaslice-base-src
- as: e2e-sno-gpu
  optional: true
  steps:
    cluster_profile: gcp
    dependencies:
      OO_BUNDLE: ci-index-instaslice-operator-bundle
    env:
      CONTROL_PLANE_NODE_TYPE: a2-highgpu-1g
      CONTROL_PLANE_ZONES: '[us-central1-f]'
      OO_INSTALL_NAMESPACE: instaslice-system
    pre:
    - chain: ipi-conf-gcp
    - ref: single-node-conf-gcp
    - ref: ipi-conf-gcp-zones
    - ref: ipi-conf-gcp-control-plane-node-type
    - ref: single-node-conf-e2e
    - chain: ipi-install
    test:
    - as: e2e
      cli: latest
      commands: |
        export KUBECTL=oc

        # Install tools
        TOOLS_DIR=/tmp/bin
        mkdir -p "${TOOLS_DIR}"
        export PATH="${TOOLS_DIR}:${PATH}"

        echo "## Install umoci"
        curl -L --retry 5 https://github.com/opencontainers/umoci/releases/download/v0.4.7/umoci.amd64 -o "${TOOLS_DIR}/umoci" && chmod +x "${TOOLS_DIR}/umoci"
        echo "   umoci installed"

        make deploy-cert-manager-ocp
        make deploy-nfd-ocp
        make deploy-nvidia-ocp
        echo "Creating OperatorGroup"
        oc create -f - <<EOF
            apiVersion: operators.coreos.com/v1
            kind: OperatorGroup
            metadata:
                name: "instaslice"
                namespace: "instaslice-system"
        EOF
        sleep 30
        make test-e2e-ocp
      from: instaslice-base-src
      resources:
        requests:
          cpu: 300m
          memory: 500Mi
    workflow: optional-operators-ci-operator-sdk-gcp
- as: e2e-kind-gpu
  optional: true
  steps:
    cluster_profile: gcp
    env:
      CONTROL_PLANE_NODE_TYPE: a2-highgpu-1g
      CONTROL_PLANE_ZONES: '[us-central1-f]'
    post:
    - ref: openshift-instaslice-operator-e2e-kind-cleanup
    pre:
    - chain: ipi-conf-gcp
    - ref: single-node-conf-gcp
    - ref: ipi-conf-gcp-zones
    - ref: ipi-conf-gcp-control-plane-node-type
    - ref: single-node-conf-e2e
    - ref: openshift-instaslice-operator-e2e-kind
    test:
    - ref: openshift-instaslice-operator-e2e-kind-test
zz_generated_metadata:
  branch: main
  org: openshift
  repo: instaslice-operator
